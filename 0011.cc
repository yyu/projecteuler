// http://projecteuler.net/problem=11
//
// In the 20 * 20 grid below, four numbers along a diagonal line
// have been marked in red.
//
// 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
// 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
// 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
// 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
// 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
// 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
// 32 98 81 28 64 23 67 10[26]38 40 67 59 54 70 66 18 38 64 70
// 67 26 20 68 02 62 12 20 95[63]94 39 63 08 40 91 66 49 94 21
// 24 55 58 05 66 73 99 26 97 17[78]78 96 83 14 88 34 89 63 72
// 21 36 23 09 75 00 76 44 20 45 35[14]00 61 33 97 34 31 33 95
// 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
// 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
// 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
// 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
// 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
// 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
// 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
// 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
// 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
// 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
//
// The product of these numbers is 26 * 63 * 78 * 14 = 1788696.
//
// What is the greatest product of four adjacent numbers in any
// direction (up, down, left, right, or diagonally) in the 20 * 20 grid?
//
// Answer: 

#include <iostream>
#include <vector>

#include <cstdio>
#include <cassert>

typedef std::vector< std::vector<int> > Array2D;

struct pro {
    pro(Array2D* A,
        int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3)
        : A_(A),
          x0_(x0), y0_(y0),
          x1_(x1), y1_(y1),
          x2_(x2), y2_(y2),
          x3_(x3), y3_(y3) {
        // printf("(%d,%d) (%d,%d) (%d,%d) (%d,%d)\n",
        //        x0_, y0_, x1_, y1_, x2_, y2_, x3_, y3_);
        if (A_)
            p = (*A_)[x0][y0] * (*A_)[x1][y1] * (*A_)[x2][y2] * (*A_)[x3][y3];
    }
    int p;
    Array2D* A_;
    int x0_;
    int y0_;
    int x1_;
    int y1_;
    int x2_;
    int y2_;
    int x3_;
    int y3_;
};

int check_product(pro p) {
    static pro g(NULL, -1, -1, -1, -1, -1, -1, -1, -1);
    if (p.p > g.p) {
        g = p;
        // printf("(%d,%d) (%d,%d) (%d,%d) (%d,%d)\n",
        //        g.x0_, g.y0_, g.x1_, g.y1_, g.x2_, g.y2_, g.x3_, g.y3_);
    }
    if (!p.A_)
        printf("(%d,%d) (%d,%d) (%d,%d) (%d,%d)\n",
               g.x0_, g.y0_, g.x1_, g.y1_, g.x2_, g.y2_, g.x3_, g.y3_);
    return g.p;
}

int gp(Array2D& A) {
    int N = A.size();
    assert(int(A[0].size()) == N);
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N - 3; j++)
            check_product(pro(&A, i, j, i, j + 1, i, j + 2, i, j + 3));
    for (int j = 0; j < N; j++)
        for (int i = 0; i < N - 3; i++)
            check_product(pro(&A, i, j, i + 1, j, i + 2, j, i + 3, j));
    for (int i = 0; i < N - 3; i++)
        for (int j = 0; j < N - 3; j++)
            check_product(pro(&A, i, j, i + 1, j + 1, i + 2, j + 2, i + 3, j + 3));
    for (int i = 0; i < N - 3; i++)
        for (int j = 3; j < N; j++)
            check_product(pro(&A, i, j, i + 1, j - 1, i + 2, j - 2, i + 3, j - 3));
    return check_product(pro(NULL, 0, 0, 0, 0, 0, 0, 0, 0));
}

void test(int A[], int N) {
    Array2D v(N, std::vector<int>(N, 0));
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            v[i][j] = A[i * N + j];
    printf("the greatest product of four adjacent numbers: %d\n", gp(v));
}

int main(int argc, char* argv[]) {
    {
        const int N = 5;
        int A[] = {
             8,  2, 22, 97, 38,
            49, 49, 99, 40, 17,
            81, 49, 31, 73, 55,
            52, 70, 95, 23,  4,
            22, 31, 16, 71, 51,
        };
        assert(sizeof(A) / sizeof(*A) == N * N);
        test(A, N);
    }
    {
        const int N = 20;
        int A[] = {
            8,  2, 22, 97, 38, 15,  0, 40,  0, 75,  4,  5,  7, 78, 52, 12, 50, 77, 91,  8,
            49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48,  4, 56, 62,  0,
            81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30,  3, 49, 13, 36, 65,
            52, 70, 95, 23,  4, 60, 11, 42, 69, 24, 68, 56,  1, 32, 56, 71, 37,  2, 36, 91,
            22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80,
            24, 47, 32, 60, 99,  3, 45,  2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50,
            32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70,
            67, 26, 20, 68,  2, 62, 12, 20, 95, 63, 94, 39, 63,  8, 40, 91, 66, 49, 94, 21,
            24, 55, 58,  5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72,
            21, 36, 23,  9, 75,  0, 76, 44, 20, 45, 35, 14,  0, 61, 33, 97, 34, 31, 33, 95,
            78, 17, 53, 28, 22, 75, 31, 67, 15, 94,  3, 80,  4, 62, 16, 14,  9, 53, 56, 92,
            16, 39,  5, 42, 96, 35, 31, 47, 55, 58, 88, 24,  0, 17, 54, 24, 36, 29, 85, 57,
            86, 56,  0, 48, 35, 71, 89,  7,  5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58,
            19, 80, 81, 68,  5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77,  4, 89, 55, 40,
            4, 52,  8, 83, 97, 35, 99, 16,  7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66,
            88, 36, 68, 87, 57, 62, 20, 72,  3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69,
            4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,  8, 46, 29, 32, 40, 62, 76, 36,
            20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74,  4, 36, 16,
            20, 73, 35, 29, 78, 31, 90,  1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57,  5, 54,
            1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52,  1, 89, 19, 67, 48,
        };
        assert(sizeof(A) / sizeof(*A) == N * N);
        test(A, N);
    }

    return 0;
}
