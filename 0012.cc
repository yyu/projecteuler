// http://projecteuler.net/problem=12
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//         1 : 1
//         3 : 1, 3
//         6 : 1, 2, 3,  6
//        10 : 1, 2, 5, 10
//        15 : 1, 3, 5, 15
//        21 : 1, 3, 7, 21
//        28 : 1, 2, 4,  7, 14, 28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?
//
// Answer: 

#include <iostream>
#include <cstdio>

inline long long tri_num(int n) {
    return (n * (n + 1)) >> 1;
}

int count_fac(long long n) {
    int cnt = 0;
    int i;
    for (i = 1; i * i < n; i++)
        if (n % i == 0)
            cnt++;
    cnt *= 2;
    if (i * i == n)
        cnt++;
    return cnt;
}

void foo(int k) {
    long long n = 1;
    for (; ; n++) {
        long long t = tri_num(n);
        int c = count_fac(t);
        printf("%lld : %lld (%d)\n", n, t, c);
        if (c > k) {
            printf("%lld : %lld (%d) !!!\n", n, t, c);
            return;
        }
    }
}

int main(int argc, char* argv[]) {
    foo(500);
    return 0;
}
